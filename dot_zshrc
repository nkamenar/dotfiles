if [[ -f "/opt/homebrew/bin/brew" ]]; then
  # If you're using macOS, you'll want this enabled
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Register brew path for VMs that have it installed
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv 2> /dev/null)" 2> /dev/null

# Environment variable for toggling marlonrichert/zsh-autocomplete plugin (default is true)
export LOAD_AUTOCOMPLETE=${LOAD_AUTOCOMPLETE:-true}

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Add in zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
# Conditionally load the plugin based on the LOAD_AUTOCOMPLETE variable. marlonrichert/zsh-autocomplete
# has a conflict with Aloxaf/fzf-tab and if both are active when you type "ls -"
# the SSH session instantly disconnects as soon as you type the dash. Toggle with 'toggle-ac' alias
if [ "$LOAD_AUTOCOMPLETE" = true ]; then
  zinit light marlonrichert/zsh-autocomplete
fi
zinit light Aloxaf/fzf-tab

# Add in snippets
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::debian
zinit snippet OMZP::aws
zinit snippet OMZP::kubectl
zinit snippet OMZP::kubectx
zinit snippet OMZP::command-not-found
zinit snippet OMZP::docker
zinit snippet OMZP::docker-compose
zinit snippet OMZP::node
zinit snippet OMZP::ansible

# Load completions with caching
autoload -Uz compinit
if [[ -z "$ZSH_COMPDUMP" ]]; then
  ZSH_COMPDUMP="${ZDOTDIR:-$HOME}/.zcompdump-${SHORT_HOST}-${ZSH_VERSION}"
fi
compinit -C  # Use -C to create and use a compiled zcompdump

zinit cdreplay -q

# Add in oh-my-posh
eval "$(oh-my-posh init zsh --config $HOME/.config/oh-my-posh/zen.toml)"

# Keybindings
bindkey -e
bindkey '^j' kill-whole-line
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward
bindkey '^[w' kill-region
bindkey "^[[3~" delete-char

# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory  # Append to history instead of overwriting
setopt inc_append_history  # Immediately add new commands to history
setopt sharehistory  # Share history between terminal sessions
setopt hist_ignore_dups  # Ignore duplicate commands
setopt hist_ignore_space  # Ignore commands starting with a space
setopt extended_history  # Record timestamp for each command

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu select
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*' sort yes
zstyle ':completion:*' format '%d'

# Aliases
alias c='clear'
alias convert-to-webp='for file in *.png; do ffmpeg -i "$file" "${file%.*}.webp"; done'
alias ls="ls -a --color"
alias pnpmup="corepack prepare pnpm@latest --activate"
alias prettypath="echo $PATH | tr ':' '\n'"
alias reload='source ~/.zshrc'
alias ng="ngrok http --domain=painfully-kind-elf.ngrok-free.app"
alias gprune='git fetch --prune && local_branches=$(git branch -vv | grep ": gone]" | awk "{print \$1}") && for branch in $local_branches; do git branch -D $branch; done && echo "Done removing stale local branches."'
alias chezmoiup='chezmoi add -r --exact ~/.oh-my-zsh'
alias toggle-ac='export LOAD_AUTOCOMPLETE=$([ "$LOAD_AUTOCOMPLETE" = true ] && echo false || echo true) && echo "Autocomplete is now $([ "$LOAD_AUTOCOMPLETE" = true ] && echo on || echo off)" && exec zsh'


# Aliases for Git shortcuts
alias gco='git checkout'
alias gs='git status'
alias gl='git log --oneline --graph --decorate'

extract () {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2) tar xvjf "$1" ;;
      *.tar.gz)  tar xvzf "$1" ;;
      *.tar.xz)  tar xvJf "$1" ;;
      *.bz2)     bunzip2 "$1"  ;;
      *.rar)     unrar x "$1"  ;;
      *.gz)      gunzip "$1"   ;;
      *.tar)     tar xvf "$1"  ;;
      *.tbz2)    tar xvjf "$1" ;;
      *.tgz)     tar xvzf "$1" ;;
      *.zip)     unzip "$1"    ;;
      *.Z)       uncompress "$1" ;;
      *.7z)      7z x "$1"     ;;
      *)         echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

# Shell integrations
if command -v fzf > /dev/null 2>&1; then
  source <(fzf --zsh)
fi

if command -v zoxide > /dev/null 2>&1; then
  eval "$(zoxide init --cmd cd zsh)"
fi